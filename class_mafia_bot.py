from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
import random
from collections import Counter, defaultdict

# –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã“£ —Å–æ“£“ì—ã —Å”©–∑–¥–µ—Ä—ñ–Ω —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω ”©–∑—ñ–º—ñ–∑ –∂–∞—Å–∞–π–º—ã–∑
last_words = {}   # {user_id: (chat_id, task)}

# üîë BotFather –±–µ—Ä–≥–µ–Ω —Ç–æ–∫–µ–Ω–¥—ñ “õ–æ–π
TOKEN = "8498228551:AAGSzFHnY_0G3EjAfZiT3lDDUTEEn2oYhWY"

# /start –∫–æ–º–∞–Ω–¥–∞—Å—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_type = update.effective_chat.type

    if chat_type == "private":
        username = update.effective_user.username or update.effective_user.first_name

        keyboard = [
            [InlineKeyboardButton("üè´ –ì—Ä—É–ø–ø–∞“ì–∞ “õ–æ—Å—É", url="https://t.me/kofee_menu_bot?startgroup=true")],
            [InlineKeyboardButton("üé≠ –†”©–ª–¥–µ—Ä", callback_data="roles_info")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_photo(
            photo="https://bookshelfbattle.com/wp-content/uploads/2015/08/shutterstock_100111385.jpg",  # —Å—É—Ä–µ—Ç —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω ”©–∑—ñ“£ “õ–æ–π
            caption=(
                f"–°”ô–ª–µ–º, @{username}! üëã\n\n"
                "üè´ –ë“±–ª ‚Äî –º–µ–∫—Ç–µ–ø —Å—Ç–∏–ª—ñ–Ω–¥–µ–≥—ñ *–ú–ê–§–ò–Ø* –æ–π—ã–Ω—ã!\n\n"
                "“ö–∞–ª–∞–π –æ–π–Ω–∞–π–¥—ã:\n"
                "1Ô∏è‚É£ –ë–æ—Ç—Ç—ã —Ç–æ–ø“õ–∞ “õ–æ—Å\n"
                "2Ô∏è‚É£ üåô –¢“Ø–Ω–¥–µ ‚Äì —Ö—É–ª–∏–≥–∞–Ω “õ–∏–º—ã–ª–¥–∞–π–¥—ã\n"
                "3Ô∏è‚É£ ‚òÄÔ∏è –ö“Ø–Ω–¥—ñ–∑ ‚Äì –¥–∞—É—ã—Å –±–µ—Ä—ñ–ø, —Ö—É–ª–∏–≥–∞–Ω–¥–∞—Ä–¥—ã —Ç–∞–±–∞–º—ã–∑!\n\n"
                "üé≤ –ö“Ø–ª–∫—ñ–ª—ñ, “õ–∞—Ä–∞–ø–∞–π—ã–º –∂”ô–Ω–µ “õ—ã–∑—ã“õ!"
            ),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "–ë“±–ª —Ç–æ–ø—Ç–∞ *–ú–ê–§–ò–Ø* –æ–π—ã–Ω—ã–Ω –æ–π–Ω–∞—É“ì–∞ –¥–∞–π—ã–Ω–±—ã–∑! üé≤\n\n/join –±–∞—Å—ã–ø “õ–æ—Å—ã–ª—ã“£–¥–∞—Ä.",
            parse_mode="Markdown"
        )

# üé≠ –†”©–ª–¥–µ—Ä —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ—Å—ñ
async def roles_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "üé≠ –†”©–ª–¥–µ—Ä–¥—ñ“£ –∞–Ω—ã“õ—Ç–∞–º–∞—Å—ã:\n\n"
        "üòà –•—É–ª–∏–≥–∞–Ω (–ú–∞—Ñ–∏—è) ‚Äì —Ç“Ø–Ω–¥–µ “õ“±–ø–∏—è –±—ñ—Ä–µ—É–¥—ñ –æ–π—ã–Ω–Ω–∞–Ω —à—ã“ì–∞—Ä–∞–¥—ã\n"
        "üéí –û“õ—É—à—ã (–ú–∏—Ä–Ω—ã–π) ‚Äì –∫“Ø–Ω–¥—ñ–∑ —Ç–∞–ª“õ—ã–ª–∞–ø, –¥–∞—É—ã—Å –±–µ—Ä–µ–¥—ñ\n"
        "üè• –ú–µ–¥–±–∏–∫–µ (–î–æ–∫—Ç–æ—Ä) ‚Äì –±—ñ—Ä –∞–¥–∞–º–¥—ã “õ“±—Ç“õ–∞—Ä–∞ –∞–ª–∞–¥—ã\n"
        "üéì –î–∏—Ä–µ–∫—Ç–æ—Ä (–®–µ—Ä–∏—Ñ) ‚Äì –±—ñ—Ä–µ—É—ñ–Ω —Ç–µ–∫—Å–µ—Ä–µ–¥—ñ\n"
        "üßë‚Äçüè´ –°—Ç–∞—Ä–æ—Å—Ç–∞ (–î–æ–Ω) ‚Äì –º–∞—Ñ–∏—è–Ω—ã –±–∞—Å“õ–∞—Ä–∞–¥—ã\n"
        "üìö –ú“±“ì–∞–ª—ñ–º (–ú–∏—Ä–Ω—ã–π) ‚Äì –±–µ–π–±—ñ—Ç –æ–π—ã–Ω—à—ã\n"
        "ü§ì –°—ã–Ω—ã–ø—Ç–∞—Å (–ú–∏—Ä–Ω—ã–π) ‚Äì –±–µ–π–±—ñ—Ç –æ–π—ã–Ω—à—ã"
    )
# üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–∞—Ä—Ç–æ—á–∫–∞—Å—ã
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    username = user.username or user.first_name

    caption = (
        "‚ú® *–ú–ê–§–ò–Ø | –ü—Ä–æ—Ñ–∏–ª—å –∫–∞—Ä—Ç–æ—á–∫–∞—Å—ã*\n\n"
        f"üë§ –ê—Ç—ã: *{user.first_name}*\n"
        f"üîó Username: @{username}\n"
        f"üÜî ID: `{user.id}`\n\n"
        "üé≤ *–°—Ç–∞—Ç—É—Å:* –û–π—ã–Ω“ì–∞ –¥–∞–π—ã–Ω!"
    )

    await query.message.reply_photo(
        photo="https://upload.wikimedia.org/wikipedia/commons/9/99/Sample_User_Icon.png",
        caption=caption,
        parse_mode="Markdown"
    )

# /join –∫–æ–º–∞–Ω–¥–∞—Å—ã ‚Äì —Ç–æ–ø—Ç–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã —Ç—ñ—Ä–∫–µ—É
players = set()  # “õ–æ—Å—ã–ª“ì–∞–Ω –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É “Ø—à—ñ–Ω

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type in ["group", "supergroup"]:
        user = update.effective_user
        players.add(user.id)

        text = (
            "üéâ *–ñ–∞“£–∞ –æ–π—ã–Ω—à—ã “õ–æ—Å—ã–ª–¥—ã!*\n\n"
            f"üë§ {user.mention_html()} –æ–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É“ì–∞ –¥–∞–π—ã–Ω!\n\n"
            f"üë• “ö–∞–∑—ñ—Ä–≥—ñ –æ–π—ã–Ω—à—ã–ª–∞—Ä —Å–∞–Ω—ã: *{len(players)}*\n\n"
            "‚è≥ –ö“Ø—Ç—É–¥–µ–º—ñ–∑..."
        )

        keyboard = [
            [InlineKeyboardButton("üöÄ –û–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É", callback_data="start_game")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_html(
            text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ —Ç–æ–ø—Ç–∞ –∂“±–º—ã—Å —ñ—Å—Ç–µ–π–¥—ñ üôÇ")

# üöÄ –û–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not players:
        await query.message.reply_text("üòÖ ”ò–∑—ñ—Ä–≥–µ –æ–π—ã–Ω—à—ã–ª–∞—Ä –∂–æ“õ!")
        return

    text = (
        "üé≠ *–û–π—ã–Ω –±–∞—Å—Ç–∞–ª–¥—ã!*\n\n"
        f"“ö–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: *{len(players)}*\n"
        "–†”©–ª–¥–µ—Ä –∂–µ–∫–µ-–∂–µ–∫–µ —á–∞—Ç“õ–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ üîí"
    )

    await query.message.reply_text(
        text,
        parse_mode="Markdown"
    )
# --- –û—Å—ã –∫–æ–¥—Ç—ã —Ñ–∞–π–ª–¥—ã“£ —Å–æ“£—ã–Ω–∞ “õ–æ—Å—É (–∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É) ---

import asyncio
import random
from collections import Counter, defaultdict
from typing import Dict, List, Optional, Set

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

# ----- –û–π—ã–Ω –∫“Ø–π—ñ–Ω —Å–∞“õ—Ç–∞–π—Ç—ã–Ω –∫–ª–∞—Å—Ç–∞—Ä -----

class Player:
    def __init__(self, user_id: int, name: str, username: Optional[str]):
        self.id = user_id
        self.name = name
        self.username = username or name
        self.alive = True

    def mention(self):
        # HTML mention
        return f'<a href="tg://user?id={self.id}">{self.username}</a>'


class Game:
    """
    –ë—ñ—Ä —Ç–æ–ø“õ–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –æ–π—ã–Ω –æ–±—ä–µ–∫—Ç—ñ—Å—ñ.
    """
    def __init__(self, chat_id: int, app):
        self.chat_id = chat_id
        self.app = app  # Application –æ–±—ä–µ–∫—Ç—ñ—Å—ñ–Ω –∂—ñ–±–µ—Ä–µ–º—ñ–∑, —Å–æ–Ω–¥–∞ bot –∞—Ä“õ—ã–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ–¥—ñ
        self.players: Dict[int, Player] = {}  # user_id -> Player
        self.roles: Dict[int, str] = {}  # user_id -> role
        self.alive: Set[int] = set()
        self.phase: str = "waiting"  # waiting | night | day | voting | ended
        self.mafia_votes: Dict[int, int] = {}  # mafia member id -> target id
        self.doctor_save: Optional[int] = None
        self.sheriff_check: Optional[int] = None
        self.day_votes: Dict[int, int] = {}  # voter id -> target id
        self.vote_message_id: Optional[int] = None
        self.night_task: Optional[asyncio.Task] = None
        self.day_task: Optional[asyncio.Task] = None

    # ---- Player management ----
    def add_player(self, user):
        if user.id in self.players:
            return False
        p = Player(user.id, user.first_name, getattr(user, "username", None))
        self.players[user.id] = p
        self.alive.add(user.id)
        return True

    def remove_player(self, user_id: int):
        if user_id in self.players:
            del self.players[user_id]
            self.alive.discard(user_id)
            self.roles.pop(user_id, None)
            return True
        return False

    def reset_actions(self):
        self.mafia_votes.clear()
        self.doctor_save = None
        self.sheriff_check = None
        self.day_votes.clear()

    # ---- Role assignment ----
    def assign_roles(self):
        """
        –†”©–ª–¥–µ—Ä–¥—ñ –∫–µ–∑–¥–µ–π—Å–æ“õ —Ç“Ø—Ä–¥–µ —Ç–∞“ì–∞–π—ã–Ω–¥–∞–π–¥—ã.
        –õ–æ–≥–∏–∫–∞: ”©–ª—à–µ–º–¥–µ—Ä–≥–µ “õ–∞—Ä–∞–π 1-2 –º–∞—Ñ–∏—è, 1 –¥–æ–Ω –º“Ø–º–∫—ñ–Ω, 1 –¥–æ–∫—Ç–æ—Ä, 1 —à–µ—Ä–∏—Ñ, “õ–∞–ª“ì–∞–Ω—ã –±–µ–π–±—ñ—Ç.
        """
        ids = list(self.players.keys())
        random.shuffle(ids)
        n = len(ids)
        roles = {}

        # –ú–∏–Ω–∏–º–∞–ª—å–¥—ã —Ä”©–ª–¥–µ—Ä:
        mafia_count = max(1, n // 4)  # —à–∞–º–∞–º–µ–Ω 1/4 –º–∞—Ñ–∏—è
        # –û—Ç—ã—Ä“ì—ã—Å—ã –∫–µ–ª–≥–µ–Ω–¥–µ—Ä “Ø—à—ñ–Ω –î–æ–Ω –±–æ–ª—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ:
        mafia_ids = set(random.sample(ids, mafia_count))
        remaining = [i for i in ids if i not in mafia_ids]

        # –î–æ–∫—Ç–æ—Ä
        if remaining:
            doctor = random.choice(remaining)
            remaining.remove(doctor)
        else:
            doctor = None

        # –®–µ—Ä–∏—Ñ
        if remaining:
            sheriff = random.choice(remaining)
            remaining.remove(sheriff)
        else:
            sheriff = None

        # –ë–∞—Å“õ–∞ –±–µ–π–±—ñ—Ç—Ç–µ—Ä
        for uid in ids:
            if uid in mafia_ids:
                roles[uid] = "mafia"
            elif uid == doctor:
                roles[uid] = "doctor"
            elif uid == sheriff:
                roles[uid] = "sheriff"
            else:
                roles[uid] = "villager"

        # –ï—Ä–µ–∫—à–µ: –µ–≥–µ—Ä –µ–∫—ñ–¥–µ–Ω –∫”©–ø –º–∞—Ñ–∏—è –±–æ–ª—Å–∞ –±—ñ—Ä–µ—É—ñ–Ω "don" –¥–µ–ø “õ–æ—è –∞–ª–∞—Å—ã“£ ‚Äî –æ–ø—Ü–∏—è —Ä–µ—Ç—ñ–Ω–¥–µ:
        if mafia_count >= 2:
            don = random.choice(list(mafia_ids))
            roles[don] = "don"

        self.roles = roles
        return roles

    # ---- Helpers ----
    def alive_players(self) -> List[Player]:
        return [self.players[uid] for uid in self.players if uid in self.alive]

    def alive_count(self) -> int:
        return len(self.alive)

    def mafia_members(self) -> List[int]:
        return [uid for uid, r in self.roles.items() if r in ("mafia", "don") and uid in self.alive]

    def is_mafia(self, user_id: int) -> bool:
        return self.roles.get(user_id) in ("mafia", "don")

    def villagers_count(self) -> int:
        return sum(1 for uid in self.alive if not self.is_mafia(uid))

    # ---- Game phases ----
    async def start_game(self):
        if len(self.players) < 3:
            await self.app.bot.send_message(self.chat_id, "–ö–µ–º—ñ–Ω–¥–µ 3 –∞–¥–∞–º “õ–∞–∂–µ—Ç! /join –∞—Ä“õ—ã–ª—ã –∞–¥–∞–º–¥–∞—Ä–¥—ã –∂–∏–Ω–∞“£–¥–∞—Ä.")
            return

        # –¢–∞–∑–∞–ª–∞—É
        self.reset_actions()
        roles = self.assign_roles()
        self.phase = "night"

        # –†”©–ª–¥–µ—Ä–¥—ñ –∂–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä—É
        for uid, role in roles.items():
            try:
                text = f"ü§´ –°–µ–Ω—ñ“£ —Ä”©–ª—ñ“£: *{role.upper()}*\n\n"
                if role == "mafia":
                    text += "–°–µ–Ω –º–∞—Ñ–∏—è—Å—ã“£ ‚Äî —Ç“Ø–Ω–¥–µ –±—ñ—Ä –∞–¥–∞–º–¥—ã —Ç–∞“£–¥–∞. –ë–∞—Å“õ–∞ –º–∞—Ñ–∏—è–ª–∞—Ä–º–µ–Ω –∫–µ–ª—ñ—Å—ñ–º –∫–µ—Ä–µ–∫.\n"
                elif role == "don":
                    text += "–°–µ–Ω ‚Äì –°—Ç–∞—Ä–æ—Å—Ç–∞ (Don). –¢“Ø–Ω–¥–µ —Ç–∞“£–¥–∞–ø, –∞“õ–ø–∞—Ä–∞—Ç –∞–ª–∞—Å—ã“£.\n"
                elif role == "doctor":
                    text += "–°–µ–Ω ‚Äì –ú–µ–¥–±–∏–∫–µ (Doctor). ”ò—Ä —Ç“Ø–Ω–¥–µ –±—ñ—Ä–µ—É—ñ–Ω —Å–∞“õ—Ç–∞–π –∞–ª–∞—Å—ã“£.\n"
                elif role == "sheriff":
                    text += "–°–µ–Ω ‚Äì –î–∏—Ä–µ–∫—Ç–æ—Ä (Sheriff). ”ò—Ä —Ç“Ø–Ω–¥–µ –±—ñ—Ä–µ—É–¥—ñ —Ç–µ–∫—Å–µ—Ä—ñ–ø, –º–∞—Ñ–∏—è –º–∞ ”ô–ª–¥–µ –∂–æ“õ –ø–∞ –±—ñ–ª–µ—Å—ñ“£.\n"
                else:
                    text += "–°–µ–Ω –±–µ–π–±—ñ—Ç –æ–π—ã–Ω—à—ã—Å—ã (Villager). –ö“Ø–Ω–¥—ñ–∑ —Ç–∞–ª“õ—ã–ª–∞—É–¥–∞ –¥–∞—É—ã—Å –±–µ—Ä–µ—Å—ñ“£.\n"

                text += "\n‚ö†Ô∏è –ë“±–ª —Ö–∞–±–∞—Ä–ª–∞–º–∞ “õ“±–ø–∏—è ‚Äî –æ–Ω—ã —á–∞—Ç—Ç–∞ –∂–∞—Ä–∏—è–ª–∞–º–∞."
                await self.app.bot.send_message(uid, text, parse_mode="Markdown")
            except Exception:
                # –ï–≥–µ—Ä –ø—Ä–∏–≤–∞—Ç —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–º–µ—Å–µ (–ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –±–æ—Ç“õ–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –±”©–≥–µ—Ç “õ–æ–π—Å–∞), —á–∞—Ç“õ–∞ –µ—Å–∫–µ—Ä—Ç—É
                await self.app.bot.send_message(self.chat_id,
                    f"‚ö†Ô∏è @{self.players[uid].username}, –º–∞“ì–∞–Ω –∂–µ–∫–µ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É–≥–µ —Ä“±“õ—Å–∞—Ç –±–µ—Ä—ñ“£—ñ–∑ ‚Äî —Ä”©–ª—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä–µ–¥—ñ.")

        # –¢–æ–ø“õ–∞ –∏–º–±–æ–≤—ã–π —Ö–∞–±–∞—Ä–ª–∞–º–∞: –æ–π—ã–Ω –±–∞—Å—Ç–∞–ª–¥—ã
        await self.app.bot.send_message(
            self.chat_id,
            self._group_start_message(),
            parse_mode="HTML",
            reply_markup=self._group_start_keyboard()
        )

        # –ë–∞—Å—Ç–∞–ø“õ—ã —Ç“Ø–Ω —Ñ–∞–∑–∞—Å—ã–Ω –±–∞—Å—Ç–∞—É
        await self.start_night_phase()

    def _group_start_message(self):
        return (
            image_url := "https://c.wallhere.com/photos/38/5f/night_city_city_lights_skyscrapers-548880.jpg!d"  # —Ç“Ø–Ω–≥—ñ —Å—É—Ä–µ—Ç
            "<b>üé≠ –û–π—ã–Ω –±–∞—Å—Ç–∞–ª–¥—ã!</b>\n\n"
            "–¢“Ø–Ω —Ç“Ø—Å—Ç—ñ ‚Äî –±”ô—Ä—ñ“£ —Ç—ã–Ω—ã—à –±–æ–ª—ã“£–¥–∞—Ä. –ú–∞—Ñ–∏—è–ª–∞—Ä “õ–∏–º—ã–ª–¥–∞–π–¥—ã.\n"
            "–¢“Ø–Ω –∞—è“õ—Ç–∞–ª“ì–∞–Ω —Å–æ“£, –Ω”ô—Ç–∏–∂–µ—Å—ñ–Ω —Ç–æ–ø—Ç–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–π–º—ã–∑."
        )

    def _group_start_keyboard(self):
        kb = [[InlineKeyboardButton("‚è≠Ô∏è –ö–µ–ª–µ—Å—ñ (—Å—Ç–∞—Ç—É—Å)", callback_data=f"status:{self.chat_id}")]]
        return InlineKeyboardMarkup(kb)

    async def start_night_phase(self, timeout: int = 45):
        self.phase = "night"
        self.reset_actions()
        # –ñ–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä: –º–∞—Ñ–∏—è“ì–∞, –¥–æ–∫—Ç–æ—Ä“ì–∞, —à–µ—Ä–∏—Ñ–∫–µ ‚Äî —Ç–∞“£–¥–∞—É –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã
        alive = self.alive_players()
        if not alive:
            return

        # –°—É—Ä–µ—Ç—Ç–µ—Ä/—Å—Ç–∏–ª—å ‚Äî –∏–º–±–∞ —Å—Ç–∏–ª—å–¥–µ–≥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä
        # –ú–∞—Ñ–∏—è“ì–∞ –∂–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞: –∫—ñ–º–¥–µ—Ä–¥—ñ —Ç–∞“£–¥–∞—É“ì–∞ –±–æ–ª–∞–¥—ã
        mafia_ids = self.mafia_members()
        targets_keyboard = self._alive_keyboard(prefix=f"mafia_target:{self.chat_id}:")

        # –ï–≥–µ—Ä –º–∞—Ñ–∏—è –±—ñ—Ä–µ—É –±–æ–ª—Å–∞, —Å–æ“ì–∞–Ω –∂–µ–∫–µ –∂—ñ–±–µ—Ä–µ–º—ñ–∑; –µ–≥–µ—Ä –±—ñ—Ä–Ω–µ—à–µ ‚Äî ”ô—Ä“õ–∞–π—Å—ã—Å—ã –∂–µ–∫–µ —Ç–∞“£–¥–∞–π–¥—ã (–¥–∞–±–∞“ì—ã –¥–∞—É—ã—Å)
        for mid in mafia_ids:
            try:
                await self.app.bot.send_message(
                    mid,
                    
                    "üåô –¢“Ø–Ω! –ú–∞“ì–∞–Ω –∫—ñ–º–¥—ñ –∞–ª—ã–ø —Ç–∞—Å—Ç–∞“ì—ã“£ –∫–µ–ª–µ–¥—ñ? –¢–∞“£–¥–∞“£—ã–∑:",
                    reply_markup=targets_keyboard
                )
            except Exception:
                pass

        # –î–æ–∫—Ç–æ—Ä“õ–∞
        doc_id = None
        for uid, r in self.roles.items():
            if r == "doctor" and uid in self.alive:
                doc_id = uid
                break
        if doc_id:
            try:
                await self.app.bot.send_message(
                    doc_id,
                    "üè• –°–µ–Ω ‚Äî –î–æ–∫—Ç–æ—Ä. “ö–∞–π –∞–¥–∞–º–¥—ã —Å–∞“õ—Ç–∞“ì—ã“£ –∫–µ–ª–µ–¥—ñ? (”®–∑—ñ“£–¥—ñ –¥–µ —Å–∞“õ—Ç–∞–π –∞–ª–∞—Å—ã“£)",
                    reply_markup=self._alive_keyboard(prefix=f"doctor_save:{self.chat_id}:")
                )
            except Exception:
                pass

        # –®–µ—Ä–∏—Ñ–∫–µ
        sheriff_id = None
        for uid, r in self.roles.items():
            if r == "sheriff" and uid in self.alive:
                sheriff_id = uid
                break
        if sheriff_id:
            try:
                await self.app.bot.send_message(
                    sheriff_id,
                    "üîé –°–µ–Ω ‚Äî –î–∏—Ä–µ–∫—Ç–æ—Ä (Sheriff). –ö—ñ–º–¥—ñ —Ç–µ–∫—Å–µ—Ä–≥—ñ“£ –∫–µ–ª–µ–¥—ñ?",
                    reply_markup=self._alive_keyboard(prefix=f"sheriff_check:{self.chat_id}:")
                )
            except Exception:
                pass

        # –¢“Ø–Ω–Ω—ñ“£ —Ç–∞–π–º–∞—É—Ç—ã ‚Äî –µ–≥–µ—Ä ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä –±–æ–ª—Å–∞ –¥–∞, —É–∞“õ—ã—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω —à–µ—à—ñ–º “õ–∞–±—ã–ª–¥–∞–Ω–∞–¥—ã
        loop = asyncio.get_running_loop()
        if self.night_task and not self.night_task.done():
            self.night_task.cancel()
        self.night_task = loop.create_task(self._night_timeout(timeout))

    async def _night_timeout(self, timeout):
        try:
            await asyncio.sleep(timeout)
            await self.resolve_night()
        except asyncio.CancelledError:
            return

    async def resolve_night(self):
        """
        
        –¢“Ø–Ω ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä—ñ–Ω —à–µ—à—É:
        - –ú–∞—Ñ–∏—è —Ç–∞“£–¥–∞—É—ã (–∫”©–±—ñ—à—ñ) vs –¥–æ–∫—Ç–æ—Ä —Å–∞“õ—Ç–∞—É—ã -> ”©–ª—Ç—ñ—Ä—É/“õ“±—Ç“õ–∞—Ä—É
        - –®–µ—Ä–∏—Ñ —Ç–µ–∫—Å–µ—Ä—É –Ω”ô—Ç–∏–∂–µ—Å—ñ–Ω –∂–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞—É
        """
        # –ú–∞—Ñ–∏–∞–ª–∞—Ä–¥—ã“£ “õ–æ—Å—ã–ª“ì–∞–Ω –¥–∞—É—ã—Å—Ç–∞—Ä—ã–Ω –∂–∏–Ω–∞—É (–º–∞—Ñ–∏—è_votes: mid -> target)
        if not self.phase == "night":
            return
        self.phase = "resolving_night"

        mafia_choice = None
        if self.mafia_votes:
            cnt = Counter(self.mafia_votes.values())
            mafia_choice = cnt.most_common(1)[0][0]  # –º–∞“õ—Å–∞—Ç user_id
        saved = self.doctor_save
        checked = self.sheriff_check

        # –®–µ—Ä–∏—Ñ–∫–µ —Ç–µ–∫—Å–µ—Ä—É –Ω”ô—Ç–∏–∂–µ—Å—ñ–Ω –∂—ñ–±–µ—Ä—É
        if checked:
            role = self.roles.get(checked, "unknown")
            is_maf = "–ò”ô, –±“±–ª –º–∞—Ñ–∏—è" if role in ("mafia", "don") else "–ñ–æ“õ, –±“±–ª –±–µ–π–±—ñ—Ç"
            # –î–∏—Ä–µ–∫—Ç–æ—Ä“ì–∞ –∂–µ–∫–µ—à–µ —Ö–∞–±–∞—Ä–ª–∞—É
            try:
                await self.app.bot.send_message(checked, f"üîé –¢–µ–∫—Å–µ—Ä—É: {is_maf}")
            except Exception:
                pass

        # –ù”ô—Ç–∏–∂–µ: –µ–≥–µ—Ä –º–∞—Ñ–∏—è —Ç–∞“£–¥–∞“ì–∞–Ω –∞–¥–∞–º –±–∞—Ä –±–æ–ª—Å–∞ –∂”ô–Ω–µ –æ–ª –¥–æ–∫—Ç–æ—Ä —Å–∞“õ—Ç–∞“ì–∞–Ω –±–æ–ª–º–∞—Å–∞ - ”©–ª—Ç—ñ—Ä—É
        killed = None
        if mafia_choice and mafia_choice in self.alive:
            if mafia_choice == saved:
                # —Å–∞“õ—Ç–∞–ª—ã–ø “õ–∞–ª–¥—ã
                await self.app.bot.send_message(self.chat_id, f"üåô –¢“Ø–Ω: –±—ñ—Ä–µ—É –±–∞–π“õ–∞–ª–¥—ã ‚Äî –±—ñ—Ä–∞“õ –¥”ô—Ä—ñ–≥–µ—Ä “õ“±—Ç“õ–∞—Ä—ã–ø “õ–∞–ª–¥—ã! üôè")
            else:
                # ”©–ª—Ç—ñ—Ä—É
                self.alive.discard(mafia_choice)
                self.players[mafia_choice].alive = False
                killed = mafia_choice
                await self.app.bot.send_message(
                    self.chat_id,
                    image_url := "https://c.wallhere.com/photos/38/5f/night_city_city_lights_skyscrapers-548880.jpg!d",  # —Ç“Ø–Ω–≥—ñ —Å—É—Ä–µ—Ç
                    f"üåô –¢“Ø–Ω –Ω”ô—Ç–∏–∂–µ: {self.players[killed].mention()} —Ç—ã–Ω—ã—à—Ç—ã“õ—Ç–∞ “õ–∞–ª–¥—ã... üíÄ",
                    parse_mode="HTML"
                )
        else:
            await self.app.bot.send_message(self.chat_id, "üåô –¢“Ø–Ω ”©—Ç—Ç—ñ: –µ—à–∫—ñ–º ”©–ª–º–µ–¥—ñ.")

        # –†”©–ª–¥–µ—Ä/–º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ reset
        self.reset_actions()

        # –°–æ“õ—ã—Ä —Ç–µ–∫—Å–µ—Ä—É: –∫—ñ–º “õ–∞–ª–¥—ã, –∫—ñ–º –º–∞—Ñ–∏—è ‚Äî —Ç–µ–∫ –æ–π—ã–Ω —Å–æ“£—ã–Ω–¥–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ
        # –ñ–µ“£—ñ–º–ø–∞–∑–¥—ã —Ç–µ–∫—Å–µ—Ä—É
        winner = self.check_win()
        if winner:
            await self.end_game(winner)
            return

        # –ö“Ø–Ω —Ñ–∞–∑–∞—Å—ã–Ω–∞ –∞—É—ã—Å—É
        await self.start_day_phase()

    async def start_day_phase(self, timeout: int = 60):
        self.phase = "day"
        # –¢–æ–ø“õ–∞ –∏–º–±–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ ‚Äî —Ç–∞–ª“õ—ã–ª–∞—É –±–∞—Å—Ç–∞–ª–¥—ãim

        image_url = "https://avatars.mds.yandex.net/i?id=98bead6b404da6c6eb4de05e08c71b27_l-9271342-images-thumbs&n=13"  # –∫“Ø–Ω–¥—ñ–∑–≥—ñ —Å—É—Ä–µ—Ç
        text = (
            "‚òÄÔ∏è <b>–ö“Ø–Ω —à—ã“õ—Ç—ã!</b>\n\n"
            "–¢–∞–ª“õ—ã–ª–∞—É —É–∞“õ—ã—Ç—ã –±–∞—Å—Ç–∞–ª–¥—ã ‚Äî —Å—ñ–∑–¥–µ—Ä –∫—ñ–º–≥–µ –∫“Ø–¥—ñ–∫—Ç–µ–Ω–µ—Å—ñ–∑–¥–µ—Ä? –ë—ñ—Ä–µ—É—ñ–Ω –¥–∞—É—ã—Å“õ–∞ “õ–æ–π—ã–ø –∫”©—Ä–µ–π—ñ–∫.\n"
            f"“ö–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: <b>{self.alive_count()}</b>"
        )
        # –ë–æ—Ç —Ç–æ–ø—Ç–∞ –¥–∞—É—ã—Å –±–µ—Ä—É –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω “õ–æ—è–¥—ã (”ô—Ä —Ç—ñ—Ä—ñ –æ–π—ã–Ω—à—ã“ì–∞)
        kb = []
        for p in self.alive_players():
            kb.append([InlineKeyboardButton(f"{p.username}", callback_data=f"vote:{self.chat_id}:{p.id}")])
        kb.append([InlineKeyboardButton("üó≥Ô∏è “ö–∞—Ä—Å—ã–ª–∞—Å–ø–∞—É", callback_data=f"vote:{self.chat_id}:0")])
        markup = InlineKeyboardMarkup(kb)

        msg = await self.app.bot.send_message(self.chat_id, text, parse_mode="HTML", reply_markup=markup)
        self.vote_message_id = msg.message_id

        # –ö“Ø–Ω–Ω—ñ“£ —Ç–∞–π–º–∞—É—Ç—ã
        loop = asyncio.get_running_loop()
        if self.day_task and not self.day_task.done():
            self.day_task.cancel()
        self.day_task = loop.create_task(self._day_timeout(timeout))

    async def _day_timeout(self, timeout):
        try:
            await asyncio.sleep(timeout)
            await self.resolve_day()
        except asyncio.CancelledError:
            return

    async def resolve_day(self):
        """
        –î–∞—É—ã—Å—Ç–∞—Ä–¥—ã –µ—Å–µ–ø—Ç–µ—É ‚Äî –µ“£ –∫”©–ø –¥–∞—É—ã—Å –∞–ª“ì–∞–Ω –∞–¥–∞–º —à—ã“õ–ø–∞“õ.
        """
        if self.phase not in ("day",):
            return
        self.phase = "resolving_day"

        # –ê—É—ã—Å—Ç—ã—Ä—É: ”©–º—ñ—Ä—à–µ“£ –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã“£ –¥–∞—É—ã—Å—Ç–∞—Ä—ã–Ω —Ç–µ–∫—Å–µ—Ä
        votes = Counter(self.day_votes.values())
        # –µ–≥–µ—Ä "0" –µ“£ –∫”©–ø –¥–∞—É—ã—Å –∞–ª“ì–∞–Ω –±–æ–ª—Å–∞ ‚Äî “õ–∏–Ω–∞–º–∞—É
        if not votes:
            await self.app.bot.send_message(self.chat_id, "üó≥Ô∏è –ö“Ø–Ω–Ω—ñ“£ —Å–æ“£—ã–Ω–¥–∞ –¥–∞—É—ã—Å –±–æ–ª–º–∞–¥—ã ‚Äî –µ—à–∫—ñ–º –µ—à–µ –∞–ª–º–∞–¥—ã.")
        else:
            top, cnt = votes.most_common(1)[0]
            # majority —Ç–∞–ª–∞–±—ã –∫–µ—Ä–µ–∫ –±–æ–ª—Å–∞ –º—ã–Ω–∞ –±–ª–æ–∫—Ç—ã “õ–æ–ª–¥–∞–Ω—ã“£ (–º—ã—Å–∞–ª—ã –∂–∞—Ä—Ç—ã–¥–∞–Ω –∫”©–ø)
            if top == 0:
                await self.app.bot.send_message(self.chat_id, "üó≥Ô∏è –ö”©–ø—à—ñ–ª—ñ–∫ “õ–∞—Ä—Å—ã–ª–∞—Å–ø–∞—É “±—Å—ã–Ω–¥—ã ‚Äî –µ—à–∫—ñ–º —à—ã“õ–ø–∞–¥—ã.")
            else:
                # –õ–∏–Ω—á—Ç–µ—É
                if top in self.alive:
                    self.alive.discard(top)
                    self.players[top].alive = False
                    await self.app.bot.send_message(
                        self.chat_id,
                        f"üî® –ö“Ø–Ω: {self.players[top].mention()} –¥–∞—É—ã—Å –∫”©–ø –∞–ª—ã–ø —à—ã“ì–∞—Ä—ã–ª–∞—Å–∞, –æ–π—ã–Ω–Ω–∞–Ω —à—ã“ì–∞—Ä—ã–ª–¥—ã.",
                        parse_mode="HTML"
                    )

        # –¢–µ–∫—Å–µ—Ä—É: –∫—ñ–º “õ–∞–ª“ì–∞–Ω—ã–Ω –∂”ô–Ω–µ –∂–µ“£—ñ–º–ø–∞–∑–¥—ã —Ç–µ–∫—Å–µ—Ä—É
        winner = self.check_win()
        if winner:
            await self.end_game(winner)
            return

        # –ö–µ–ª–µ—Å—ñ —Ç“Ø–Ω—ñ –±–∞—Å—Ç–∞—É
        await self.start_night_phase()

    def check_win(self) -> Optional[str]:
        """
        –ñ–µ“£—ñ–º–ø–∞–∑ –∫—ñ–º ‚Äî 'mafia' –Ω–µ–º–µ—Å–µ 'villagers' –Ω–µ–º–µ—Å–µ –∂–æ“õ
        –ú–∞—Ñ–∏—è —Å–∞–Ω—ã >= –±–µ–π–±—ñ—Ç—Ç–µ—Ä —Å–∞–Ω—ã -> –º–∞—Ñ–∏—è –∂–µ“£–µ–¥—ñ
        –ï–≥–µ—Ä –±–∞—Ä–ª—ã“õ –º–∞—Ñ–∏—è ”©–ª—Å–µ -> –±–µ–π–±—ñ—Ç—Ç–µ—Ä –∂–µ“£–µ–¥—ñ
        """
        mafia_alive = sum(1 for uid in self.alive if self.roles.get(uid) in ("mafia", "don"))
        villagers_alive = sum(1 for uid in self.alive if self.roles.get(uid) not in ("mafia", "don"))

        if mafia_alive == 0:
            return "villagers"
        if mafia_alive >= villagers_alive:
            return "mafia"
        return None

    async def end_game(self, winner: str):
        self.phase = "ended"
        if winner == "mafia":
            text = "üè¥‚Äç‚ò†Ô∏è <b>–•—É–ª–∏–≥–∞–Ω –∂–µ“£–¥—ñ!</b>\n\n“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑ –º–∞—Ñ–∏—è–Ω—ã!"
        else:
            text = "üèÖ <b>–ë–µ–π–±—ñ—Ç—Ç–µ—Ä –∂–µ“£–¥—ñ!</b>\n\n“∞—Ä–ª—ã“õ—Å—ã–∑ –∫“Ø–Ω–¥–µ—Ä –∫–µ–ª—Å—ñ–Ω!"
        # “ö–∞–π—Å—ã—Å—ã –∂–µ“£–≥–µ–Ω—ñ–Ω –∂”ô–Ω–µ –±–∞—Ä–ª—ã“õ —Ä”©–ª–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É
        roles_report = "\n\n<b>–†”©–ª–¥–µ—Ä:</b>\n"
        for uid, role in self.roles.items():
            alive_mark = "‚úÖ" if uid in self.alive else "üíÄ"
            roles_report += f"{alive_mark} {self.players[uid].username} ‚Äî {role}\n"

        await self.app.bot.send_message(self.chat_id, text + roles_report, parse_mode="HTML")

        # –†–µ—Å–µ—Ç
        self.players.clear()
        self.roles.clear()
        self.alive.clear()
        self.reset_actions()

    def _alive_keyboard(self, prefix: str = "target:"):
        kb = []
        for p in self.alive_players():
            kb.append([InlineKeyboardButton(p.username, callback_data=f"{prefix}{p.id}")])
        # “õ–æ—Å—ã–º—à–∞ "”®–∑—ñ“£–¥—ñ —Ç–∞“£–¥–∞—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã
        kb.append([InlineKeyboardButton("”®–∑—ñ“£–¥—ñ —Ç–∞“£–¥–∞—É", callback_data=f"{prefix}{0}")])
        return InlineKeyboardMarkup(kb)


# ----- Game manager: ”ô—Ä–±—ñ—Ä —Ç–æ–ø“õ–∞ –∂–µ–∫–µ Game –æ–±—ä–µ–∫—Ç—ñ—Å—ñ -----
GAME_STORE: Dict[int, Game] = {}  # chat_id -> Game


def get_game(chat_id: int, app) -> Game:
    if chat_id not in GAME_STORE:
        GAME_STORE[chat_id] = Game(chat_id, app)
    return GAME_STORE[chat_id]

# üîª –û–π—ã–Ω—à—ã–Ω—ã —à—ã“ì–∞—Ä—É
async def eliminate_player(chat_id, user, role, context):
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            f"üö´ *{user.first_name}* –æ–π—ã–Ω–Ω–∞–Ω —à—ã“ì–∞—Ä—ã–ª–¥—ã!\n"
            f"üé≠ –û–Ω—ã“£ —Ä”©–ª—ñ: *{role}*\n\n"
            "üïä –°–æ“£“ì—ã —Å”©–∑—ñ–Ω –∫“Ø—Ç—É–¥–µ–º—ñ–∑ (30 —Å–µ–∫)..."
        ),
        parse_mode="Markdown"
    )

    await context.bot.send_message(
        chat_id=user.id,
        text=(
            "üòµ –°—ñ–∑ –æ–π—ã–Ω–Ω–∞–Ω —à—ã“ì–∞—Ä—ã–ª–¥—ã“£—ã–∑!\n\n"
            "üó£ –°–æ“£“ì—ã —Å”©–∑—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ —Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä/GIF –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ "
            "(30 —Å–µ–∫—É–Ω–¥ —ñ—à—ñ–Ω–¥–µ). –û–ª —Ç–æ–ø—Ç–∞ –∂–∞—Ä–∏—è–ª–∞–Ω–∞–¥—ã."
        )
    )

    # 30 —Å–µ–∫—É–Ω–¥—Ç—ã“õ —Ç–∞–π–º–µ—Ä “õ–æ—Å—É
    task = asyncio.create_task(last_word_timeout(user.id, chat_id, context))
    last_words[user.id] = (chat_id, task)


# üîª –¢–∞–π–º–µ—Ä
async def last_word_timeout(user_id, chat_id, context):
    await asyncio.sleep(30)
    if user_id in last_words:
        last_words.pop(user_id)
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚è≥ –°–æ“£“ì—ã —Å”©–∑—ñ–Ω –∞–π—Ç–ø–∞–π –∫–µ—Ç—Ç—ñ..."
        )


# üîª –°–æ“£“ì—ã —Å”©–∑–¥—ñ “õ–∞–±—ã–ª–¥–∞—É (–∫–µ–∑ –∫–µ–ª–≥–µ–Ω —Ñ–æ—Ä–º–∞—Ç)
async def handle_last_word(update, context):
    user = update.effective_user
    if user.id in last_words:
        chat_id, task = last_words.pop(user.id)
        task.cancel()  # —Ç–∞–π–º–µ—Ä–¥—ñ —Ç–æ“õ—Ç–∞—Ç—É

        msg = update.message

        try:
            # –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã —Ç–æ–ø“õ–∞ –∫”©—à—ñ—Ä—É
            await msg.copy(chat_id=chat_id)

            # “ö–æ—Å—ã–º—à–∞ –∂–∞–∑—É
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üïä <b>{user.first_name}</b> —Å–æ“£“ì—ã —Å”©–∑—ñ–Ω –∞–π—Ç—Ç—ã!",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"‚ùå –°–æ“£“ì—ã —Å”©–∑–¥—ñ –∫”©—à—ñ—Ä—É–¥–µ “õ–∞—Ç–µ: {e}")
# ----- –•–µ–Ω–¥–ª–µ—Ä–ª–µ—Ä (–∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω) -----
# –ë“±–ª —Ö–µ–Ω–¥–ª–µ—Ä–ª–µ—Ä–¥—ñ main() —ñ—à—ñ–Ω–µ —Ç—ñ—Ä–∫–µ
# app.add_handler(CommandHandler("join", join))
# app.add_handler(CommandHandler("leave", leave))
# app.add_handler(CommandHandler("startgame", startgame_cmd))
# app.add_handler(CommandHandler("cancelgame", cancel_game_cmd))
# app.add_handler(CommandHandler("status", status_cmd))
# app.add_handler(CallbackQueryHandler(callback_router))  # –±–∞—Ä–ª—ã“õ callback-—Ç–∞—Ä–¥—ã –æ—Å—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä ”©“£–¥–µ–π–¥—ñ

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /join ‚Äî —Ç–æ–ø —ñ—à—ñ–Ω–¥–µ –æ–π—ã–Ω“ì–∞ “õ–æ—Å—ã–ª—É
    """
    if update.effective_chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–û–π—ã–Ω“ì–∞ —Ç–µ–∫ —Ç–æ–ø —ñ—à—ñ–Ω–¥–µ “õ–æ—Å—ã–ª–∞—Å—ã“£. –ë–æ—Ç—Ç—ã —Ç–æ–ø“õ–∞ —à–∞“õ—ã—Ä—ã“£–¥–∞—Ä –∂”ô–Ω–µ /join –¥–µ–ø –∂–∞–∑—ã“£–¥–∞—Ä.")
        return

    chat_id = update.effective_chat.id
    game = get_game(chat_id, context.application)
    added = game.add_player(update.effective_user)
    if added:
        text = (
            f"üéâ {update.effective_user.mention_html()} –æ–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É“ì–∞ “õ–æ—Å—ã–ª–¥—ã!\n"
            f"“ö–∞–∑—ñ—Ä –±–∞—Ä–ª—ã“ì—ã: <b>{len(game.players)}</b> –æ–π—ã–Ω—à—ã."
        )
    else:
        text = f"‚ö†Ô∏è {update.effective_user.mention_html()}, —Å–µ–Ω ”ô–ª–¥–µ“õ–∞—à–∞–Ω “õ–æ—Å—ã–ª“ì–∞–Ω—Å—ã“£."
    await update.message.reply_html(text)

async def leave(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /leave ‚Äî —Ç–æ–ø —ñ—à—ñ–Ω–¥–µ –æ–π—ã–Ω–Ω–∞–Ω —à—ã“ì—É
    """
    if update.effective_chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ —Ç–æ–ø—Ç–∞ –∂“±–º—ã—Å —ñ—Å—Ç–µ–π–¥—ñ.")
        return
    chat_id = update.effective_chat.id
    game = get_game(chat_id, context.application)
    removed = game.remove_player(update.effective_user.id)
    if removed:
        await update.message.reply_text(f"{update.effective_user.mention_html()} –æ–π—ã–Ω–Ω–∞–Ω —à—ã“õ—Ç—ã.", parse_mode="HTML")
    else:
        await update.message.reply_text("–°–µ–Ω –æ–π—ã–Ω–¥–∞ –∂–æ“õ—Å—ã“£.", parse_mode="HTML")

async def startgame_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /startgame ‚Äî —Ç–æ–ø—Ç—ã“£ –∞–¥–º–∏–Ω—ñ –Ω–µ–º–µ—Å–µ –∫—ñ–º –±–∞—Å—Ç–∞–º–∞“õ –±–æ–ª—Å–∞ –æ–π—ã–Ω –±–∞—Å—Ç–∞–π–¥—ã.
    """
    if update.effective_chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–û–π—ã–Ω–¥—ã —Ç–µ–∫ —Ç–æ–ø —ñ—à—ñ–Ω–¥–µ –±–∞—Å—Ç–∞–π –∞–ª–∞—Å—ã–∑.")
        return

    chat_id = update.effective_chat.id
    game = get_game(chat_id, context.application)
    if game.phase != "waiting":
        await update.message.reply_text("–û–π—ã–Ω “õ–∞–∑—ñ—Ä –∂“Ø—Ä—ñ–ø –∂–∞—Ç—ã—Ä –Ω–µ–º–µ—Å–µ –∞—è“õ—Ç–∞–ª–¥—ã.")
        return

    await game.start_game()

async def cancel_game_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ø —ñ—à—ñ–Ω–¥–µ “õ–æ–ª–¥–∞–Ω—ã–ª–∞–¥—ã.")
        return
    chat_id = update.effective_chat.id
    if chat_id in GAME_STORE:
        del GAME_STORE[chat_id]
        await update.message.reply_text("–û–π—ã–Ω –∫“Ø—à—ñ–Ω –∂–æ–π–¥—ã.")
    else:
        await update.message.reply_text("–û–π—ã–Ω–¥—ã —Ç–∞–ø–ø–∞–¥—ã–º.")

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /status ‚Äî —Ç–æ–ø—Ç–∞“ì—ã –∞“ì—ã–º–¥–∞“ì—ã –∫“Ø–π (—Ç–µ–∫ —Ç–æ–ø—Ç–∞)
    """
    chat_id = update.effective_chat.id
    game = GAME_STORE.get(chat_id)
    if not game:
        await update.message.reply_text("–û–π—ã–Ω –∂–æ“õ.")
        return
    text = (
        f"üìä –û–π—ã–Ω –∫“Ø–π—ñ: {game.phase}\n"
        f"üë• “ö–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä: {len(game.players)}\n"
        f"üî∞ –¢—ñ—Ä—ñ: {len(game.alive)}\n"
    )
    await update.message.reply_text(text)


# ----- Callback –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã (callback_data-–ª–∞—Ä –æ—Å—ã –∂–µ—Ä–¥–µ ”©“£–¥–µ–ª–µ–¥—ñ) -----
async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    callback_data —Ñ–æ—Ä–º–∞—Ç—Ç–∞—Ä—ã:
      - mafia_target:<chat_id>:<target_id>
      - doctor_save:<chat_id>:<target_id>
      - sheriff_check:<chat_id>:<target_id>
      - vote:<chat_id>:<target_id>
      - status:<chat_id>
    """
    query = update.callback_query
    data = query.data or ""
    await query.answer()  # “õ—ã—Å“õ–∞ –∂–∞—É–∞–ø (–æ–ø—Ü–∏–æ–Ω–∞–ª)

    parts = data.split(":")
    action = parts[0] if parts else ""
    if action == "status":
        # –¢–æ–ø—Ç–∞“ì—ã –∂–∞–ª–ø—ã —Å—Ç–∞—Ç—É—Å –∫”©—Ä—Å–µ—Ç–µ–¥—ñ
        if len(parts) >= 2:
            chat_id = int(parts[1])
            game = GAME_STORE.get(chat_id)
            if not game:
                await query.message.reply_text("–û–π—ã–Ω —Ç–∞–±—ã–ª–º–∞–¥—ã.")
                return
            text = (
                f"üìä –û–π—ã–Ω –∫“Ø–π—ñ: {game.phase}\n"
                f"üë• “ö–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä: {len(game.players)}\n"
                f"üî∞ –¢—ñ—Ä—ñ: {len(game.alive)}\n"
            )
            await query.message.reply_text(text)
        return

    if action in ("mafia_target", "doctor_save", "sheriff_check", "vote"):
        if len(parts) < 3:
            return
        chat_id = int(parts[1])
        target_id = int(parts[2])
        game = GAME_STORE.get(chat_id)
        user_id = query.from_user.id

        if not game:
            await query.message.reply_text("–û–π—ã–Ω —Ç–∞–±—ã–ª–º–∞–¥—ã.")
            return

        # ---- –ú–∞—Ñ–∏—è —Ç–∞“£–¥–∞—É—ã ----
        if action == "mafia_target":
            if game.phase != "night":
                await query.message.reply_text("“ö–∞–∑—ñ—Ä —Ç“Ø–Ω –µ–º–µ—Å.")
                return
            if not game.is_mafia(user_id):
                await query.message.reply_text("–°–µ–Ω –º–∞—Ñ–∏—è –µ–º–µ—Å—Å—ñ“£.")
                return
            # —Ç—ñ—Ä—ñ –±–æ–ª—É –∫–µ—Ä–µ–∫
            if target_id != 0 and target_id not in game.alive:
                await query.message.reply_text("–ë“±–ª –∞–¥–∞–º ”©–ª—ñ –Ω–µ–º–µ—Å–µ –∂–æ“õ.")
                return
            game.mafia_votes[user_id] = target_id
            await query.message.reply_text("‚úÖ –¢–∞“£–¥–∞–¥—ã“£. –°”ô–π–∫–µ—Å—ñ–Ω—à–µ –±–∞—Å“õ–∞ –º–∞—Ñ–∏—è–ª–∞—Ä –¥–∞ —Ç–∞“£–¥–∞—É –∫–µ—Ä–µ–∫.")
            # –µ–≥–µ—Ä –±–∞—Ä–ª—ã“õ –º–∞—Ñ–∏—è –¥–∞—É—ã—Å –±–µ—Ä—Å–µ, —Ç–æ“õ—Ç–∞—Ç—É (—Ç–∞–π–º–µ—Ä–¥—ñ –∂–æ–π—ã–ø –∞—Ä—Ç—ã“õ —ñ—Å–∫–µ “õ–æ—Å—É)
            mafia_mems = game.mafia_members()
            if all(mid in game.mafia_votes for mid in mafia_mems):
                # –∂–µ–¥–µ–ª —à–µ—à—É
                if game.night_task and not game.night_task.done():
                    game.night_task.cancel()
                await game.resolve_night()
            return

        # ---- –î–æ–∫—Ç–æ—Ä ----
        if action == "doctor_save":
            if game.phase != "night":
                await query.message.reply_text("“ö–∞–∑—ñ—Ä —Ç“Ø–Ω –µ–º–µ—Å.")
                return
            # –¢–µ–∫—Å–µ—Ä
            role = game.roles.get(user_id)
            if role != "doctor":
                await query.message.reply_text("–°–µ–Ω –¥–æ–∫—Ç–æ—Ä –µ–º–µ—Å—Å—ñ“£.")
                return
            if target_id != 0 and target_id not in game.alive:
                await query.message.reply_text("–ë“±–ª –∞–¥–∞–º ”©–ª—ñ –Ω–µ–º–µ—Å–µ –∂–æ“õ.")
                return
            game.doctor_save = target_id
            await query.message.reply_text("‚úÖ –¢—ã“£–¥–∞ ‚Äî —Å–∞“õ—Ç–∞–ø “õ–æ–π–¥—ã“£.")
            # –µ–≥–µ—Ä –º–∞—Ñ–∏—è –¥–∞ –¥–∞—É—ã—Å –±–µ—Ä—ñ–ø –±—ñ—Ç—Å–µ –∂”ô–Ω–µ –¥–æ–∫—Ç–æ—Ä –±—ñ—Ç—Å–µ -> —à–µ—à—É
            mafia_mems = game.mafia_members()
            if (not mafia_mems) or all(mid in game.mafia_votes for mid in mafia_mems):
                if game.night_task and not game.night_task.done():
                    game.night_task.cancel()
                await game.resolve_night()
            return

        # ---- –®–µ—Ä–∏—Ñ ----
        if action == "sheriff_check":
            if game.phase != "night":
                await query.message.reply_text("“ö–∞–∑—ñ—Ä —Ç“Ø–Ω –µ–º–µ—Å.")
                return
            role = game.roles.get(user_id)
            if role != "sheriff":
                await query.message.reply_text("–°–µ–Ω —à–µ—Ä–∏—Ñ –µ–º–µ—Å—Å—ñ“£.")
                return
            if target_id != 0 and target_id not in game.alive:
                await query.message.reply_text("–ë“±–ª –∞–¥–∞–º ”©–ª—ñ –Ω–µ–º–µ—Å–µ –∂–æ“õ.")
                return
            game.sheriff_check = target_id
            await query.message.reply_text("üîé –ñ–∞—Ä–∞–π–¥—ã, —Ç–µ–∫—Å–µ—Ä–µ–¥—ñ. –ù”ô—Ç–∏–∂–µ—Å—ñ–Ω –∞–ª“ì–∞–Ω–¥–∞ —Ö–∞–±–∞—Ä–ª–∞–π–º—ã–Ω.")
            # –µ–≥–µ—Ä –±–∞—Å“õ–∞ –¥–∞ ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä –±—ñ—Ç—Å–µ
            mafia_mems = game.mafia_members()
            if (not mafia_mems) or all(mid in game.mafia_votes for mid in mafia_mems):
                if game.night_task and not game.night_task.done():
                    game.night_task.cancel()
                await game.resolve_night()
            return

        # ---- –î–∞—É—ã—Å –±–µ—Ä—É (–∫“Ø–Ω) ----
        if action == "vote":
            if game.phase != "day":
                await query.message.reply_text("“ö–∞–∑—ñ—Ä –¥–∞—É—ã—Å –±–µ—Ä—É —É–∞“õ—ã—Ç—ã –µ–º–µ—Å.")
                return
            if user_id not in game.alive:
                await query.message.reply_text("”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, —Å–µ–Ω –æ–π—ã–Ω–Ω–∞–Ω —à—ã“õ—Ç—ã“£ ‚Äî –¥–∞—É—ã—Å –±–µ—Ä–µ –∞–ª–º–∞–π—Å—ã“£.")
                return
            # target_id == 0 –±–æ–ª—Å–∞ ‚Äî “õ–∞—Ä—Å—ã–ª–∞—Å–ø–∞—É (–∞–±—Å—Ç–µ–π–Ω)
            game.day_votes[user_id] = target_id
            # –±–µ–ª–≥—ñ–ª—ñ –±—ñ—Ä –µ“£ –∫”©–ø –¥–∞—É—ã—Å“õ–∞ –∂–µ—Ç–∫–µ–Ω-–∂–µ—Ç–ø–µ–≥–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
            # –µ–≥–µ—Ä –¥–∞—É—ã—Å –±–µ—Ä—É—à—ñ–ª–µ—Ä —Å–∞–Ω—ã —Ç—ñ—Ä—ñ –æ–π—ã–Ω—à—ã–ª–∞—Ä —Å–∞–Ω—ã–Ω–∞ —Ç–µ“£ –±–æ–ª—Å–∞ ‚Äî —à–µ—à—É
            if len(game.day_votes) >= game.alive_count():
                if game.day_task and not game.day_task.done():
                    game.day_task.cancel()
                await game.resolve_day()
            else:
                await query.message.reply_text("‚úÖ –î–∞—É—ã—Å—ã“£ –µ—Å–µ–ø—Ç–µ–ª–¥—ñ.")
            return

    # –ï–≥–µ—Ä –±–µ–ª–≥—ñ—Å—ñ–∑ action –±–æ–ª—Å–∞ ‚Äî –∂–∞–π—à—ñ
    await query.message.reply_text("–ë–µ–ª–≥—ñ—Å—ñ–∑ ”ô—Ä–µ–∫–µ—Ç.")

# ------ “ö–æ—Å—É/–¢—ñ—Ä–∫–µ—É –Ω“±—Å“õ–∞—É–ª–∞—Ä—ã ------
# main() —ñ—à—ñ–Ω–¥–µ –Ω–µ–º–µ—Å–µ Application “õ“±—Ä“ì–∞–Ω–¥–∞ —Ç”©–º–µ–Ω–¥–µ–≥—ñ–ª–µ—Ä–¥—ñ —Ç—ñ—Ä–∫–µ:
#
# app.add_handler(CommandHandler("join", join))
# app.add_handler(CommandHandler("leave", leave))
# app.add_handler(CommandHandler("startgame", startgame_cmd))
# app.add_handler(CommandHandler("cancelgame", cancel_game_cmd))
# app.add_handler(CommandHandler("status", status_cmd))
# app.add_handler(CallbackQueryHandler(callback_router))
#
# –°–æ–Ω–¥–∞–π-–∞“õ, —Å–µ–Ω—ñ“£ –±“±—Ä—ã–Ω“ì—ã /start, profile, roles_info, rules —Ö–µ–Ω–¥–ª–µ—Ä–ª–µ—Ä—ñ“£ –±–æ–ª—Å–∞,
# –æ–ª–∞—Ä–¥—ã “õ–∞–ª–¥—ã—Ä—ã–ø, –æ—Å—ã “õ–æ—Å—ã–º—à–∞–ª–∞—Ä–¥—ã —Ç—ñ—Ä–∫–µ—É–¥—ñ “±–º—ã—Ç–ø–∞.
#
# ----- –ü–∞–π–¥–∞–ª–∞–Ω—É –±–æ–π—ã–Ω—à–∞ –µ—Å–∫–µ—Ä—Ç—É–ª–µ—Ä -----
# 1) –¢“Ø–Ω/–∫“Ø–Ω–Ω—ñ“£ —Ç–∞–π–º–∞—É—Ç —É–∞“õ—ã—Ç—ã–Ω (start_night_phase, start_day_phase —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã–Ω–¥–∞)
#    “õ–∞–∂–µ—Ç—Ç—ñ–ª—ñ–∫—Ç–µ—Ä—ñ–Ω–µ “õ–∞—Ä–∞–π ”©–∑–≥–µ—Ä—Ç–µ –∞–ª–∞—Å—ã“£ (“õ–∞–∑—ñ—Ä 45s/60s “õ–æ–π—ã–ª“ì–∞–Ω).
# 2) –ï–≥–µ—Ä –ø—Ä–∏–≤–∞—Ç —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–º–µ–π—Ç—ñ–Ω “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä –±–æ–ª—Å–∞, –æ–ª–∞—Ä–¥—ã —Ç–æ–ø—Ç–∞ –µ—Å–∫–µ—Ä—Ç—É –º–∞“õ—Å–∞—Ç—ã–Ω–¥–∞
#    —Ç–æ–ø“õ–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.
# 3) UI-–¥—ã "–∏–º–±–æ–≤—ã–π" –µ—Ç—É “Ø—à—ñ–Ω —Ç–æ–ø –∂”ô–Ω–µ –∂–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥–∞“ì—ã –º”ô—Ç—ñ–Ω–¥–µ—Ä–¥—ñ “õ–∞–ª–∞—É—ã“£–∞ “õ–∞—Ä–∞–π
#    —ç–º–æ–¥–∑–∏, HTML/Markdown —Å—Ç–∏–ª—å–¥–µ—Ä—ñ–º–µ–Ω —Å”ô–Ω–¥–µ.
#
# –ï–≥–µ—Ä “õ–æ—Å—ã–ø —Ç—ñ—Ä–∫–µ–≥–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω “õ–∞—Ç–µ–ª—ñ–∫ —à—ã“õ—Å–∞ (callback_pattern, parsing –∂”ô–Ω–µ —Ç.–±.) ‚Äî “õ–∞–∑—ñ—Ä–≥—ñ–¥–µ–π
# –æ–Ω—ã —Ç“Ø–∑–µ–ø –±–µ—Ä–µ–º—ñ–Ω. “ö–æ—Å—ã–º—à–∞: –¥–∞—É—ã—Å—Ç–∞—Ä–¥—ã tie-break –µ—Ä–µ–∂–µ—Å—ñ–Ω “õ–∞–ª–∞–π –∞–ª“ì—ã“£ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω (—Ç–µ“£ –¥–∞—É—ã—Å,
# ÏïÑÎ¨¥–∫—ñ–º —à—ã“ì–∞—Ä—ã–ª–º–∞—Å—ã–Ω –Ω–µ–º–µ—Å–µ —Ä–∞–Ω–¥–æ–º) –∞–π—Ç—Å–∞“£ —Å–æ–Ω—ã “õ–æ—Å—ã–ø –±–µ—Ä–µ–º—ñ–Ω.
#
# --- –ö–æ–¥ –∞—è“õ—Ç–∞–ª–¥—ã ---

# üîπ –ù–µ–≥—ñ–∑–≥—ñ —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(roles_info, pattern="roles_info"))
    app.add_handler(CommandHandler("join", join))
    app.add_handler(CallbackQueryHandler(profile, pattern="profile"))
    app.add_handler(CommandHandler("join", join))
    app.add_handler(CommandHandler("leave", leave))
    app.add_handler(CommandHandler("startgame", startgame_cmd))
    app.add_handler(CommandHandler("cancelgame", cancel_game_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CallbackQueryHandler(callback_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_last_word))


    print("ü§ñ Mafia Bot Python –∞—Ä“õ—ã–ª—ã —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!")
    app.run_polling()

if __name__ == "__main__":
    main()
